b32 :: i32;
b8 :: i8;
byte :: u8;

Alloc_Op :: enum {
  ALLOC;
  REALLOC;
  FREE;
  FREE_ALL;
}

Allocator :: func(size: u64, op: Alloc_Op, allocator_data: *void, old_ptr: *void, old_size: u64, align: u64) *byte;

Arena :: struct {
  data:     *byte;
  capacity: u64;
  size:     u64;
}

arena_make :: func(data: *void, capacity: u64) Arena {
  result: Arena;
  result.data = (*byte)(data);
  result.capacity = capacity;
  return result;
}

Context :: struct {
  allocator:      Allocator;
  allocator_data: *void;
  scratch:        Arena;
}

alloc :: func(size: u64) *void {
  result := ctx.allocator(size, Alloc_Op.ALLOC, ctx.allocator_data, null, 0, 4);
  return result;
}

string :: struct {
  data:  *char;
  count: u64;
}

memory_copy :: func(dst: *void, src: *void, size: u64) {
  for i : u64 = 0; i < size; i += 1 {
    (*byte)(dst)[i] = (*byte)(src)[i];
  }
}

arena_allocator :: func(size: u64, op: Alloc_Op, allocator_data: *void, old_ptr: *void, old_size: u64, align: u64) *byte {
  //TODO: alignment
  result: *byte = null;

  arena :: (*Arena)(allocator_data);
  if op == Alloc_Op.ALLOC {
    result = arena.data + arena.size;
    arena.size += size;
  } else if op == Alloc_Op.FREE_ALL {
    arena.size = 0;
  } else if op == Alloc_Op.REALLOC {
    result = (*byte)(alloc(size));
    memory_copy(result, old_ptr, old_size);
  }

  return result;
}

malloc :: func(size: u64) *void #foreign;
free :: func(ptr: *void) #foreign;
realloc :: func(old_ptr: *void, new_size: u64) #foreign;

system_allocator :: func(size: u64, op: Alloc_Op, allocator_data: *void, old_ptr: *void, old_size: u64, align: u64) *byte {
  //TODO: alignment
  result: *byte = null;

  if op == Alloc_Op.ALLOC {
    result = (*byte)(malloc(size));
  } else if op == Alloc_Op.FREE_ALL {
    free(old_ptr);
  } else if op == Alloc_Op.REALLOC {
    realloc(old_ptr, size);
  }

  return result;
}

__string_make :: func(data: *char, count: u64) string {
  result: string;
  result.data = (*char)(alloc(count)); 
  memory_copy(result.data, data, count);
  result.count = count;
  return result;
}

__entry :: func() {
  ctx.allocator = system_allocator;
  main();
}






putchar :: func(c: char) i32 #foreign;

print_string :: func(s: string) {
  for i : u64 = 0; i < s.count; i += 1 {
    putchar(s.data[i]);
  }
}

main :: func() {
  print_string("hello world");
}

